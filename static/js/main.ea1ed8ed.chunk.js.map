{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","calc","setState","calculating","data","iterations","parseInt","state","axios","post","then","res","pi","coords_x_in_circle","coords_y_in_circle","coords_x_outside_circle","coords_y_outside_circle","in_circle","catch","err","console","log","handleIterationsChange","event","target","value","this","className","x","y","type","mode","marker","color","name","layout","width","height","title","shapes","xref","yref","x0","y0","x1","y1","line","rangemode","style","margin","disabled","onChange","onClick","marginTop","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ea1ed8ed.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./App.css\"\nimport Plot from 'react-plotly.js';\nimport axios from \"axios\";\n\nclass App extends Component {\n  constructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n      coords_x_in_circle: [],\n      coords_y_in_circle: [],\n      coords_x_outside_circle: [],\n      coords_y_outside_circle: [],\n      calculating: false,\n      iterations: 0,\n      in_circle: 0,\n      pi: 0\n\t\t};\n  }\n\n  calc = () => {\n    this.setState({\n      calculating: true\n    });\n\n    let data = {\n\t\t\titerations: parseInt(this.state.iterations)\n    };\n\n    axios\n\t\t\t.post(\n\t\t\t\t\"https://5hanl732i4.execute-api.us-east-1.amazonaws.com/prod/calc\",\n\t\t\t\tdata\n\t\t\t)\n\t\t\t.then(res => {\n        const {\n          pi,\n          coords_x_in_circle,\n          coords_y_in_circle,\n          coords_x_outside_circle,\n          coords_y_outside_circle,\n          in_circle\n        } = res.data;\n\n        this.setState({\n          pi: pi,\n          in_circle: in_circle,\n          coords_x_in_circle: coords_x_in_circle,\n          coords_y_in_circle: coords_y_in_circle,\n          coords_x_outside_circle: coords_x_outside_circle,\n          coords_y_outside_circle: coords_y_outside_circle,\n          calculating: false\n        });\n      })\n      .catch(err => {\n        console.log(err)\n        this.setState({\n          calculating: false\n        });\n      });\n  }\n\n  handleIterationsChange = (event) => {\n    this.setState({ iterations: event.target.value });\n  }\n  \n  render() {\n    const {\n\t\t\titerations,\n      pi,\n      calculating,\n      coords_x_in_circle,\n      coords_y_in_circle,\n      coords_x_outside_circle,\n      coords_y_outside_circle,\n      in_circle\n    } = this.state;\n    \n    return (\n      <div>\n        <div className=\"controls\">\n          <Plot\n            data={[\n              {\n                x: coords_x_in_circle,\n                y: coords_y_in_circle,\n                type: 'scatter',\n                mode: 'markers',\n                marker: {color: 'blue'},\n                name: \"Inside\",\n              },\n              {\n                x: coords_x_outside_circle,\n                y: coords_y_outside_circle,\n                type: 'scatter',\n                mode: 'markers',\n                marker: {color: 'red'},\n                name: \"Outside\",\n              },\n            ]}\n            layout={{\n              width: 800,\n              height: 800,\n              title: 'Estimating Pi using the Monte Carlo Simulation',\n              shapes: [\n                {\n                  type: 'circle',\n                  xref: 'x',\n                  yref: 'y',\n                  x0: -1,\n                  y0: -1,\n                  x1: 1,\n                  y1: 1,\n                  line: {\n                    color: 'lightblue'\n                  }\n                },\n              ],\n              \"xaxis\": {\"fixedrange\": true, rangemode: \"nonnegative\"},\n              \"yaxis\": {\"fixedrange\": true, rangemode: \"nonnegative\"},\n            }}\n          />\n        </div>\n        \n        <div className=\"controls\">\n          {calculating ?\n            <div style={{margin: \"16px 0\"}}>\n              Iterations: <input value={iterations} disabled /> \n              <button className=\"button\" disabled>Calculating...</button>\n            </div> :\n            <div style={{margin: \"16px 0\"}}>\n              Iterations: <input value={iterations} onChange={this.handleIterationsChange} /> \n              <button className=\"button\" onClick={this.calc}>Calculate</button>\n            </div>\n          }\n        </div>\n\n        <div className=\"controls\" style={{marginTop: \"-16px\"}}>\n          <p>Points in circle: {in_circle} |</p>\n          <p>&nbsp; Total Points: {iterations} |</p>\n          <p>&nbsp; Estimation of Pi: {pi}</p>\n        </div>\n        \n        <div className=\"controls\" style={{marginTop: \"-16px\"}}>\n          <p>\n            <i style={{color: \"gray\"}}>\n              The more iterations the more it will take to load, but the more precise the estimate will be.\n              <br />\n              The max amount of points displayed in the plot is 10,000 because of performance issues.\n            </i>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
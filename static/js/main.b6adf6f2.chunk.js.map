{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","calc","setState","calculating","x_in_circle","y_in_circle","x_outside_circle","y_outside_circle","i","state","iterations","x","Math","random","y","push","pi","length","handleIterationsChange","event","target","value","this","className","data","type","mode","marker","color","name","layout","width","height","title","shapes","xref","yref","x0","y0","x1","y1","line","rangemode","style","margin","disabled","onChange","onClick","marginTop","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wQAsJeA,E,kDAjJb,WAAYC,GAAQ,IAAD,8BACnB,cAAMA,IAYNC,KAAO,WACL,EAAKC,SAAS,CACZC,aAAa,IAQf,IALA,IAAIC,EAAc,GACdC,EAAc,GACdC,EAAmB,GACnBC,EAAmB,GAEdC,EAAI,EAAGA,EAAI,EAAKC,MAAMC,WAAYF,IAAK,CAC9C,IAAIG,EAAIC,KAAKC,SACTC,EAAIF,KAAKC,SAEE,SAACF,EAAG,GAAJ,SAAUG,EAAG,IAEZ,GACdV,EAAYW,KAAKJ,GACjBN,EAAYU,KAAKD,KAEjBR,EAAiBS,KAAKJ,GACtBJ,EAAiBQ,KAAKD,IAI1B,IAAIE,EAAK,EAEL,EAAKP,MAAMC,aACbM,EAAK,EAAIZ,EAAYa,OAAO,EAAKR,MAAMC,YAGzC,EAAKR,SAAS,CACZc,GAAIA,EACJZ,YAAaA,EACbC,YAAaA,EACbC,iBAAkBA,EAClBC,iBAAkBA,EAClBJ,aAAa,KAlDE,EAsDnBe,uBAAyB,SAACC,GACxB,EAAKjB,SAAS,CAAEQ,WAAYS,EAAMC,OAAOC,SArD3C,EAAKZ,MAAQ,CACTL,YAAa,GACbC,YAAa,GACbC,iBAAkB,GAClBC,iBAAkB,GAClBJ,aAAa,EACbO,WAAY,EACZM,GAAI,GATW,E,qDA0DT,IAAD,EASHM,KAAKb,MAPVC,EAFQ,EAERA,WACGM,EAHK,EAGLA,GACAb,EAJK,EAILA,YACAC,EALK,EAKLA,YACAC,EANK,EAMLA,YACAC,EAPK,EAOLA,iBACAC,EARK,EAQLA,iBAGF,OACE,6BACE,yBAAKgB,UAAU,YACb,kBAAC,IAAD,CACEC,KAAM,CACJ,CACEb,EAAGP,EACHU,EAAGT,EACHoB,KAAM,UACNC,KAAM,UACNC,OAAQ,CAACC,MAAO,QAChBC,KAAM,UAER,CACElB,EAAGL,EACHQ,EAAGP,EACHkB,KAAM,UACNC,KAAM,UACNC,OAAQ,CAACC,MAAO,OAChBC,KAAM,YAGVC,OAAQ,CACNC,MAAO,IACPC,OAAQ,IACRC,MAAO,oEACPC,OAAQ,CACN,CACET,KAAM,SACNU,KAAM,IACNC,KAAM,IACNC,IAAK,EACLC,IAAK,EACLC,GAAI,EACJC,GAAI,EACJC,KAAM,CACJb,MAAO,eAIb,MAAS,CAAC,YAAc,EAAMc,UAAW,eACzC,MAAS,CAAC,YAAc,EAAMA,UAAW,mBAK/C,yBAAKnB,UAAU,YACZpB,EACC,yBAAKwC,MAAO,CAACC,OAAQ,WAArB,eACc,2BAAOC,UAAQ,EAACxB,MAAOX,KAErC,yBAAKiC,MAAO,CAACC,OAAQ,WAArB,eACc,2BAAOvB,MAAOX,EAAYoC,SAAUxB,KAAKJ,yBACrD,4BAAQK,UAAU,SAASwB,QAASzB,KAAKrB,MAAzC,eAKN,yBAAKsB,UAAU,WAAWoB,MAAO,CAACK,UAAW,UAC3C,gDAAsB5C,EAAYa,OAAlC,MACA,iDAAyBP,EAAzB,MACA,qDAA6BM,IAG/B,yBAAKO,UAAU,WAAWoB,MAAO,CAACK,UAAW,UAC3C,2BACE,uBAAGL,MAAO,CAACf,MAAO,SAAlB,wG,GAxIMqB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b6adf6f2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./App.css\"\nimport Plot from 'react-plotly.js';\n\nclass App extends Component {\n  constructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n      x_in_circle: [],\n      y_in_circle: [],\n      x_outside_circle: [],\n      y_outside_circle: [],\n      calculating: false,\n      iterations: 0,\n      pi: 0\n\t\t};\n  }\n\n  calc = () => {\n    this.setState({\n      calculating: true\n    });\n\n    let x_in_circle = [];\n    let y_in_circle = [];\n    let x_outside_circle = [];\n    let y_outside_circle = [];\n\n    for (let i = 0; i < this.state.iterations; i++) {\n      let x = Math.random();\n      let y = Math.random();\n\n      let distance = (x**2) + (y**2);\n\n      if (distance <= 1) {\n        x_in_circle.push(x);\n        y_in_circle.push(y);\n      } else {\n        x_outside_circle.push(x);\n        y_outside_circle.push(y);\n      }\n    }\n\n    let pi = 0;\n\n    if (this.state.iterations) {\n      pi = 4 * x_in_circle.length/this.state.iterations;\n    } \n\n    this.setState({\n      pi: pi,\n      x_in_circle: x_in_circle,\n      y_in_circle: y_in_circle,\n      x_outside_circle: x_outside_circle,\n      y_outside_circle: y_outside_circle,\n      calculating: false\n    });\n  }\n\n  handleIterationsChange = (event) => {\n    this.setState({ iterations: event.target.value });\n  }\n  \n  render() {\n    const {\n\t\t\titerations,\n      pi,\n      calculating,\n      x_in_circle,\n      y_in_circle,\n      x_outside_circle,\n      y_outside_circle\n    } = this.state;\n    \n    return (\n      <div>\n        <div className=\"controls\">\n          <Plot\n            data={[\n              {\n                x: x_in_circle,\n                y: y_in_circle,\n                type: 'scatter',\n                mode: 'markers',\n                marker: {color: 'blue'},\n                name: \"Inside\",\n              },\n              {\n                x: x_outside_circle,\n                y: y_outside_circle,\n                type: 'scatter',\n                mode: 'markers',\n                marker: {color: 'red'},\n                name: \"Outside\",\n              },\n            ]}\n            layout={{\n              width: 800,\n              height: 800,\n              title: 'Trying to demonstrate estimation of Pi with Monte Carlo algorithm',\n              shapes: [\n                {\n                  type: 'circle',\n                  xref: 'x',\n                  yref: 'y',\n                  x0: -1,\n                  y0: -1,\n                  x1: 1,\n                  y1: 1,\n                  line: {\n                    color: 'lightblue'\n                  }\n                },\n              ],\n              \"xaxis\": {\"fixedrange\": true, rangemode: \"nonnegative\"},\n              \"yaxis\": {\"fixedrange\": true, rangemode: \"nonnegative\"},\n            }}\n          />\n        </div>\n        \n        <div className=\"controls\">\n          {calculating ?\n            <div style={{margin: \"16px 0\"}}>\n              Iterations: <input disabled value={iterations} /> \n            </div> :\n            <div style={{margin: \"16px 0\"}}>\n              Iterations: <input value={iterations} onChange={this.handleIterationsChange} /> \n              <button className=\"button\" onClick={this.calc}>Calculate</button>\n            </div>\n          }\n        </div>\n\n        <div className=\"controls\" style={{marginTop: \"-16px\"}}>\n          <p>Points in circle: {x_in_circle.length} |</p>\n          <p>&nbsp; Total Points: {iterations} |</p>\n          <p>&nbsp; Estimation of Pi: {pi}</p>\n        </div>\n        \n        <div className=\"controls\" style={{marginTop: \"-16px\"}}>\n          <p>\n            <i style={{color: \"gray\"}}>\n              The more iterations the more it will take to load, but the more precise the estimate will be.\n            </i>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}